// version 1 -To check the file existence and file size from data table
using System;
using System.Data;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Iterate through each row in the data table
        foreach (DataRow row in dataTable.Rows)
        {
            string folderPath = row["Folder path"].ToString();
            string outputFileName = row["Output File Name"].ToString();

            // Check if the output file exists
            string outputFileFullPath = Path.Combine(folderPath, outputFileName);
            bool fileExists = File.Exists(outputFileFullPath);

            // Display the result
            Console.WriteLine($"ID: {row["ID"]}, Description: {row["Description"]}, Jobname: {row["Jobname"]}, Folder path: {folderPath}, Output File Name: {outputFileName}, File Exists: {(fileExists ? "Yes" : "No")}");

            // Display file size if file exists
            if (fileExists)
            {
                FileInfo fileInfo = new FileInfo(outputFileFullPath);
                Console.WriteLine($"File Size: {fileInfo.Length} bytes");
            }

            Console.WriteLine();
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "SQL1", "Oracle1");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.txt", "SQL2", "Oracle2");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "SQL3", "Oracle3");

        return dataTable;
    }
}

//version 2 To check file size and redirect based on the file size limit of 1000 KB
using System;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Iterate through each row in the data table
        foreach (DataRow row in dataTable.Rows)
        {
            string folderPath = row["Folder path"].ToString();
            string outputFileName = row["Output File Name"].ToString();

            // Check if the output file exists
            string outputFileFullPath = Path.Combine(folderPath, outputFileName);
            bool fileExists = File.Exists(outputFileFullPath);

            // Display the result
            Console.WriteLine($"ID: {row["ID"]}, Description: {row["Description"]}, Jobname: {row["Jobname"]}, Folder path: {folderPath}, Output File Name: {outputFileName}, File Exists: {(fileExists ? "Yes" : "No")}");

            // Redirect based on file size
            if (fileExists)
            {
                FileInfo fileInfo = new FileInfo(outputFileFullPath);
                long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                Console.WriteLine($"File Size: {fileSizeKB} KB");

                if (fileSizeKB < 1000)
                {
                    // Redirect to FileComparison.exe
                    Console.WriteLine("Redirecting to FileComparison.exe");
                    Process.Start("FileComparison.exe", outputFileFullPath);
                }
                else
                {
                    // Redirect to DBComparison.exe
                    Console.WriteLine("Redirecting to DBComparison.exe");
                    Process.Start("DBComparison.exe", outputFileFullPath);
                }
            }
            else
            {
                Console.WriteLine("File does not exist.");
            }

            Console.WriteLine();
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "SQL1", "Oracle1");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.txt", "SQL2", "Oracle2");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "SQL3", "Oracle3");

        return dataTable;
    }
}


//version 3 To redirec to respective file extension exe
using System;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Iterate through each row in the data table
        foreach (DataRow row in dataTable.Rows)
        {
            string folderPath = row["Folder path"].ToString();
            string outputFileName = row["Output File Name"].ToString();

            // Check if the output file exists
            string outputFileFullPath = Path.Combine(folderPath, outputFileName);
            bool fileExists = File.Exists(outputFileFullPath);

            // Display the result
            Console.WriteLine($"ID: {row["ID"]}, Description: {row["Description"]}, Jobname: {row["Jobname"]}, Folder path: {folderPath}, Output File Name: {outputFileName}, File Exists: {(fileExists ? "Yes" : "No")}");

            // Redirect based on file size
            if (fileExists)
            {
                FileInfo fileInfo = new FileInfo(outputFileFullPath);
                long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                Console.WriteLine($"File Size: {fileSizeKB} KB");

                string fileExtension = Path.GetExtension(outputFileName).ToLower();

                if (fileSizeKB < 1000)
                {
                    // Redirect based on file extension
                    switch (fileExtension)
                    {
                        case ".txt":
                        case ".dat":
                        case ".csv":
                            Console.WriteLine("Redirecting to Text_Comparison.exe");
                            Process.Start("Text_Comparison.exe", outputFileFullPath);
                            break;
                        case ".xlsx":
                            Console.WriteLine("Redirecting to Excel_Comparison.exe");
                            Process.Start("Excel_Comparison.exe", outputFileFullPath);
                            break;
                        default:
                            Console.WriteLine("File extension not supported for comparison.");
                            break;
                    }
                }
                else
                {
                    // Redirect to DBComparison.exe
                    Console.WriteLine("Redirecting to DBComparison.exe");
                    Process.Start("DBComparison.exe", outputFileFullPath);
                }
            }
            else
            {
                Console.WriteLine("File does not exist.");
            }

            Console.WriteLine();
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "SQL1", "Oracle1");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.csv", "SQL2", "Oracle2");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.xlsx", "SQL3", "Oracle3");

        return dataTable;
    }
}

//version 4 
using System;
using System.Data;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Iterate through each row in the data table
        foreach (DataRow row in dataTable.Rows)
        {
            string folderPath = row["Folder path"].ToString();
            string outputFileName = row["Output File Name"].ToString();
            string sqlValue = row["SQL"].ToString();
            string oracleValue = row["Oracle"].ToString();

            // Check if SQL or Oracle value is "Yes"
            if (sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
            {
                // Display grid output
                DisplayGridOutput(outputFileName, folderPath, sqlValue, oracleValue);
            }

            Console.WriteLine();
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.txt", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to display grid output
    static void DisplayGridOutput(string outputFileName, string folderPath, string sqlValue, string oracleValue)
    {
        string outputFileFullPath = Path.Combine(folderPath, outputFileName);

        if (File.Exists(outputFileFullPath))
        {
            FileInfo fileInfo = new FileInfo(outputFileFullPath);
            long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

            Console.WriteLine("File Name: " + outputFileName);

            // SQL section
            Console.WriteLine("SQL:");
            if (sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("   File Present: Yes");
                Console.WriteLine("   File Size: " + fileSizeKB + " KB");
                Console.WriteLine("   File Path: " + outputFileFullPath);
            }
            else
            {
                Console.WriteLine("   File Present: No");
                Console.WriteLine("   File Size: ");
                Console.WriteLine("   File Path: ");
            }

            // Oracle section
            Console.WriteLine("Oracle:");
            if (oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("   File Present: Yes");
                Console.WriteLine("   File Size: " + fileSizeKB + " KB");
                Console.WriteLine("   File Path: " + outputFileFullPath);
            }
            else
            {
                Console.WriteLine("   File Present: No");
                Console.WriteLine("   File Size: ");
                Console.WriteLine("   File Path: ");
            }
        }
        else
        {
            Console.WriteLine("File Name: " + outputFileName);
            Console.WriteLine("SQL:");
            Console.WriteLine("   File Present: No");
            Console.WriteLine("   File Size: ");
            Console.WriteLine("   File Path: ");
            Console.WriteLine("Oracle:");
            Console.WriteLine("   File Present: No");
            Console.WriteLine("   File Size: ");
            Console.WriteLine("   File Path: ");
        }
    }
}

//version 5 
using System;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Iterate through each row in the data table
        foreach (DataRow row in dataTable.Rows)
        {
            string folderPath = row["Folder path"].ToString();
            string outputFileName = row["Output File Name"].ToString();
            string sqlValue = row["SQL"].ToString();
            string oracleValue = row["Oracle"].ToString();

            // Check if SQL or Oracle value is "Yes"
            if (sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
            {
                string outputFileFullPath = Path.Combine(folderPath, outputFileName);

                // Check if the file exists in the folder
                if (File.Exists(outputFileFullPath))
                {
                    // Display file present information
                    FileInfo fileInfo = new FileInfo(outputFileFullPath);
                    long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                    Console.WriteLine("File Name: " + outputFileName);
                    Console.WriteLine("File Present: Yes");
                    Console.WriteLine("File Size: " + fileSizeKB + " KB");
                    Console.WriteLine("File Path: " + outputFileFullPath);

                    // Check file extension and redirect accordingly
                    string fileExtension = Path.GetExtension(outputFileName).ToLower();
                    RedirectBasedOnSizeAndExtension(fileSizeKB, fileExtension, outputFileName);
                }
                else
                {
                    // File not present
                    Console.WriteLine("File Name: " + outputFileName);
                    Console.WriteLine("File Present: No");
                    Console.WriteLine("File Size: ");
                    Console.WriteLine("File Path: ");
                }
            }

            Console.WriteLine();
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.xlsx", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to check if the file extension is valid
    static bool IsValidExtension(string fileExtension)
    {
        return fileExtension == ".txt" || fileExtension == ".dat" || fileExtension == ".csv" || fileExtension == ".xlsx";
    }

    // Method to redirect based on file size and extension
    static void RedirectBasedOnSizeAndExtension(long fileSizeKB, string fileExtension, string outputFileName)
    {
        if (fileSizeKB < 1000)
        {
            if (fileExtension == ".xlsx")
            {
                Console.WriteLine("Redirecting to Excel_Comparison.exe");
                Process.Start("Excel_Comparison.exe", outputFileName);
            }
            else
            {
                Console.WriteLine("Redirecting to Text_Comparison.exe");
                Process.Start("Text_Comparison.exe", outputFileName);
            }
        }
        else
        {
            Console.WriteLine("Redirecting to DBComparison.exe");
            Process.Start("DBComparison.exe", outputFileName);
        }
    }
}

//version 6
//web.config
<configuration>
  <appSettings>
    <add key="Environment1" value="Server1"/>
    <add key="Environment2" value="Server2"/>
    <!-- Add more environment-server pairs as needed -->
  </appSettings>
</configuration>

//program.cs
using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Get servers from web config
        NameValueCollection servers = ConfigurationManager.GetSection("Servers") as NameValueCollection;

        if (servers == null || servers.Count == 0)
        {
            Console.WriteLine("No servers configured in the web.config.");
            return;
        }

        // Iterate through each server
        foreach (string environment in servers.AllKeys)
        {
            string server = servers[environment];

            Console.WriteLine($"Environment: {environment}, Server: {server}");

            // Iterate through each row in the data table
            foreach (DataRow row in dataTable.Rows)
            {
                string folderPath = row["Folder path"].ToString();
                string outputFileName = row["Output File Name"].ToString();
                string sqlValue = row["SQL"].ToString();
                string oracleValue = row["Oracle"].ToString();

                // Check if SQL or Oracle value is "Yes"
                if (sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
                {
                    // Check if the file exists in the server's folder
                    string outputFileFullPath = Path.Combine(folderPath, outputFileName);
                    bool fileExists = File.Exists(outputFileFullPath);

                    if (fileExists)
                    {
                        // Display file information
                        FileInfo fileInfo = new FileInfo(outputFileFullPath);
                        long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                        Console.WriteLine("File Name: " + outputFileName);
                        Console.WriteLine("File Present: Yes");
                        Console.WriteLine("File Size: " + fileSizeKB + " KB");
                        Console.WriteLine("File Path: " + outputFileFullPath);

                        // Redirect based on file size and extension
                        RedirectBasedOnSizeAndExtension(fileSizeKB, outputFileName);
                    }
                    else
                    {
                        Console.WriteLine($"File '{outputFileName}' does not exist in the folder path '{folderPath}' on server '{server}'.");
                    }
                }

                Console.WriteLine();
            }
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1", @"C:\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2", @"C:\SampleFolder2", "OutputFile2.xlsx", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to redirect based on file size and extension
    static void RedirectBasedOnSizeAndExtension(long fileSizeKB, string outputFileName)
    {
        string fileExtension = Path.GetExtension(outputFileName).ToLower();
        
        if (fileSizeKB < 1000)
        {
            if (fileExtension == ".xlsx")
            {
                Console.WriteLine("Redirecting to Excel_Comparison.exe");
                Process.Start("Excel_Comparison.exe", outputFileName);
            }
            else
            {
                Console.WriteLine("Redirecting to Text_Comparison.exe");
                Process.Start("Text_Comparison.exe", outputFileName);
            }
        }
        else
        {
            Console.WriteLine("Redirecting to DBComparison.exe");
            Process.Start("DBComparison.exe", outputFileName);
        }
    }
}

//version 7
using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Get servers from web config
        NameValueCollection servers = ConfigurationManager.GetSection("Servers") as NameValueCollection;

        if (servers == null || servers.Count == 0)
        {
            Console.WriteLine("No servers configured in the web.config.");
            return;
        }

        // Iterate through each server
        foreach (string environment in servers.AllKeys)
        {
            string server = servers[environment];

            Console.WriteLine($"Environment: {environment}, Server: {server}");

            // Iterate through each row in the data table
            foreach (DataRow row in dataTable.Rows)
            {
                string folderPath = row["Folder path"].ToString();
                string outputFileName = row["Output File Name"].ToString();
                string sqlValue = row["SQL"].ToString();
                string oracleValue = row["Oracle"].ToString();
                string jobName = row["Jobname"].ToString();

                // Check if SQL or Oracle value is "Yes" and if the job name contains the environment name
                if ((sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
                    && (jobName.Contains("BAU") || jobName.Contains("CONV4")))
                {
                    // Check if the file exists in the server's folder
                    string outputFileFullPath = Path.Combine(folderPath, outputFileName);
                    bool fileExists = File.Exists(outputFileFullPath);

                    if (fileExists)
                    {
                        // Display file information
                        FileInfo fileInfo = new FileInfo(outputFileFullPath);
                        long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                        Console.WriteLine("File Name: " + outputFileName);
                        Console.WriteLine("File Present: Yes");
                        Console.WriteLine("File Size: " + fileSizeKB + " KB");
                        Console.WriteLine("File Path: " + outputFileFullPath);

                        // Redirect based on file size and extension
                        RedirectBasedOnSizeAndExtension(fileSizeKB, outputFileName);
                    }
                    else
                    {
                        Console.WriteLine($"File '{outputFileName}' does not exist in the folder path '{folderPath}' on server '{server}'.");
                    }
                }

                Console.WriteLine();
            }
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1 BAU", @"C:\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2 CONV4", @"C:\SampleFolder2", "OutputFile2.xlsx", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"C:\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to redirect based on file size and extension
    static void RedirectBasedOnSizeAndExtension(long fileSizeKB, string outputFileName)
    {
        string fileExtension = Path.GetExtension(outputFileName).ToLower();
        
        if (fileSizeKB < 1000)
        {
            if (fileExtension == ".xlsx")
            {
                Console.WriteLine("Redirecting to Excel_Comparison.exe");
                Process.Start("Excel_Comparison.exe", outputFileName);
            }
            else
            {
                Console.WriteLine("Redirecting to Text_Comparison.exe");
                Process.Start("Text_Comparison.exe", outputFileName);
            }
        }
        else
        {
            Console.WriteLine("Redirecting to DBComparison.exe");
            Process.Start("DBComparison.exe", outputFileName);
        }
    }
}

//version 8
using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Get servers from web config
        NameValueCollection servers = ConfigurationManager.GetSection("Servers") as NameValueCollection;

        if (servers == null || servers.Count == 0)
        {
            Console.WriteLine("No servers configured in the web.config.");
            return;
        }

        // Iterate through each server
        foreach (string environment in servers.AllKeys)
        {
            string server = servers[environment];

            Console.WriteLine($"Environment: {environment}, Server: {server}");

            // Get AutosysExePath from config
            string autosysExePath = ConfigurationManager.AppSettings["AutosysExePath"];
            if (string.IsNullOrEmpty(autosysExePath))
            {
                Console.WriteLine("AutosysExePath is not configured in the app settings.");
                continue;
            }

            // Iterate through each row in the data table
            foreach (DataRow row in dataTable.Rows)
            {
                string folderPath = row["Folder path"].ToString();
                string outputFileName = row["Output File Name"].ToString();
                string sqlValue = row["SQL"].ToString();
                string oracleValue = row["Oracle"].ToString();
                string jobName = row["Jobname"].ToString();

                // Check if SQL or Oracle value is "Yes" and if the job name contains the environment name
                if ((sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
                    && (jobName.Contains("BAU") || jobName.Contains("CONV4")))
                {
                    // Append the key value to the path
                    string path = Path.Combine(autosysExePath, server, folderPath.Substring(2)); // Remove "d$" from the folder path
                    string outputFileFullPath = Path.Combine(path, outputFileName);

                    // Check if the file exists in the server's folder
                    bool fileExists = File.Exists(outputFileFullPath);

                    if (fileExists)
                    {
                        // Display file information
                        FileInfo fileInfo = new FileInfo(outputFileFullPath);
                        long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                        Console.WriteLine("File Name: " + outputFileName);
                        Console.WriteLine("File Present: Yes");
                        Console.WriteLine("File Size: " + fileSizeKB + " KB");
                        Console.WriteLine("File Path: " + outputFileFullPath);

                        // Redirect based on file size and extension
                        RedirectBasedOnSizeAndExtension(fileSizeKB, outputFileName);
                    }
                    else
                    {
                        Console.WriteLine($"File '{outputFileName}' does not exist in the folder path '{path}' on server '{server}'.");
                    }
                }

                Console.WriteLine();
            }
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1 BAU", @"d$\app\LoanIQ\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2 CONV4", @"d$\app\LoanIQ\SampleFolder2", "OutputFile2.xlsx", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"d$\app\LoanIQ\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to redirect based on file size and extension
    static void RedirectBasedOnSizeAndExtension(long fileSizeKB, string outputFileName)
    {
        string fileExtension = Path.GetExtension(outputFileName).ToLower();
        
        if (fileSizeKB < 1000)
        {
            if (fileExtension == ".xlsx")
            {
                Console.WriteLine("Redirecting to Excel_Comparison.exe");
                Process.Start("Excel_Comparison.exe", outputFileName);
            }
            else
            {
                Console.WriteLine("Redirecting to Text_Comparison.exe");
                Process.Start("Text_Comparison.exe", outputFileName);
            }
        }
        else
        {
            Console.WriteLine("Redirecting to DBComparison.exe");
            Process.Start("DBComparison.exe", outputFileName);
        }
    }
}

//version 9
using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;

class Program
{
    static void Main()
    {
        // Sample data table
        DataTable dataTable = GetSampleDataTable();

        // Get servers from web config
        NameValueCollection servers = ConfigurationManager.GetSection("Servers") as NameValueCollection;

        if (servers == null || servers.Count == 0)
        {
            Console.WriteLine("No servers configured in the web.config.");
            return;
        }

        // Iterate through each server
        foreach (string environment in servers.AllKeys)
        {
            string server = servers[environment];

            Console.WriteLine($"Environment: {environment}, Server: {server}");

            // Get AutosysExePath from config
            string autosysExePath = ConfigurationManager.AppSettings["AutosysExePath"];
            if (string.IsNullOrEmpty(autosysExePath))
            {
                Console.WriteLine("AutosysExePath is not configured in the app settings.");
                continue;
            }

            // Iterate through each row in the data table
            foreach (DataRow row in dataTable.Rows)
            {
                string folderPath = row["Folder path"].ToString();
                string outputFileName = row["Output File Name"].ToString();
                string sqlValue = row["SQL"].ToString();
                string oracleValue = row["Oracle"].ToString();
                string jobName = row["Jobname"].ToString();

                // Check if SQL or Oracle value is "Yes" and if the job name contains the environment name
                if ((sqlValue.Equals("Yes", StringComparison.OrdinalIgnoreCase) || oracleValue.Equals("Yes", StringComparison.OrdinalIgnoreCase))
                    && (jobName.Contains("BAU") || jobName.Contains("CONV4")))
                {
                    // Append the key value to the path
                    string path = Path.Combine(autosysExePath, server, folderPath.Substring(2)); // Remove "d$" from the folder path

                    // Check if the file exists in the server's folder
                    bool fileExists = File.Exists(Path.Combine(path, outputFileName));

                    if (fileExists)
                    {
                        // Display file information
                        FileInfo fileInfo = new FileInfo(outputFileName);
                        long fileSizeKB = fileInfo.Length / 1024; // Convert to KB

                        Console.WriteLine("File Name: " + outputFileName);
                        Console.WriteLine("File Present: Yes");
                        Console.WriteLine("File Size: " + fileSizeKB + " KB");
                        Console.WriteLine("File Path: " + Path.Combine(path, outputFileName));

                        // Redirect based on file size and extension
                        RedirectBasedOnSizeAndExtension(fileSizeKB, outputFileName);
                    }
                    else
                    {
                        Console.WriteLine($"File '{outputFileName}' does not exist in the folder path '{path}' on server '{server}'.");
                    }
                }

                Console.WriteLine();
            }
        }
    }

    // Method to create sample data table
    static DataTable GetSampleDataTable()
    {
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("Description", typeof(string));
        dataTable.Columns.Add("Jobname", typeof(string));
        dataTable.Columns.Add("Folder path", typeof(string));
        dataTable.Columns.Add("Output File Name", typeof(string));
        dataTable.Columns.Add("SQL", typeof(string));
        dataTable.Columns.Add("Oracle", typeof(string));

        // Sample data
        dataTable.Rows.Add(1, "Description 1", "Job 1 BAU", @"d$\app\LoanIQ\SampleFolder1", "OutputFile1.txt", "Yes", "No");
        dataTable.Rows.Add(2, "Description 2", "Job 2 CONV4", @"d$\app\LoanIQ\SampleFolder2", "OutputFile2.xlsx", "No", "Yes");
        dataTable.Rows.Add(3, "Description 3", "Job 3", @"d$\app\LoanIQ\SampleFolder3", "OutputFile3.txt", "Yes", "No");

        return dataTable;
    }

    // Method to redirect based on file size and extension
    static void RedirectBasedOnSizeAndExtension(long fileSizeKB, string outputFileName)
    {
        string fileExtension = Path.GetExtension(outputFileName).ToLower();
        
        if (fileSizeKB < 1000)
        {
            if (fileExtension == ".xlsx")
            {
                Console.WriteLine("Redirecting to Excel_Comparison.exe");
                Process.Start("Excel_Comparison.exe", outputFileName);
            }
            else
            {
                Console.WriteLine("Redirecting to Text_Comparison.exe");
                Process.Start("Text_Comparison.exe", outputFileName);
            }
        }
        else
        {
            Console.WriteLine("Redirecting to DBComparison.exe");
            Process.Start("DBComparison.exe", outputFileName);
        }
    }
}
