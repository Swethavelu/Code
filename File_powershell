# Load the Excel interop assembly
Add-Type -AssemblyName Microsoft.Office.Interop.Excel

# Set the path to the Excel file
$excelFilePath = "C:\Path\To\Your\File.xlsx"

# Create a new Excel application
$excel = New-Object -ComObject Excel.Application

# Open the workbook
$workbook = $excel.Workbooks.Open($excelFilePath)

# Select the first worksheet
$worksheet = $workbook.Worksheets.Item(1)

# Find the last row and column with data
$maxRow = $worksheet.UsedRange.Rows.Count
$maxCol = $worksheet.UsedRange.Columns.Count

# Loop through each row in the worksheet
for ($row = 2; $row -le $maxRow; $row++) {
    # Read values from the current row
    $ID = $worksheet.Cells.Item($row, 1).Value2
    $description = $worksheet.Cells.Item($row, 2).Value2
    $Jobname = $worksheet.Cells.Item($row, 3).Value2
    $SourceFolderPath = $worksheet.Cells.Item($row, 4).Value2
    $DestinationFolderPath = $worksheet.Cells.Item($row, 5).Value2
    $OutputFilename = $worksheet.Cells.Item($row, 6).Value2
    $JobStatus = $worksheet.Cells.Item($row, 7).Value2
    $SQL = $worksheet.Cells.Item($row, 8).Value2
    $Oracle = $worksheet.Cells.Item($row, 9).Value2

    # Check if the Job status is "completed"
    if ($JobStatus -eq "completed") {
        # Copy the file from source folder to destination folder
        $sourceFile = Join-Path -Path $SourceFolderPath -ChildPath $OutputFilename
        $destinationFile = Join-Path -Path $DestinationFolderPath -ChildPath $OutputFilename
        Copy-Item -Path $sourceFile -Destination $destinationFile -Force
        Write-Host "File '$OutputFilename' copied from '$SourceFolderPath' to '$DestinationFolderPath'."
    }
}

# Close the workbook and Excel application
$workbook.Close()
$excel.Quit()

# Release COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($worksheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
Remove-Variable excel, workbook, worksheet

# Clear clipboard (if used)
[GC]::Collect()
[GC]::WaitForPendingFinalizers()

Write-Host "Script execution completed."

#version 2
# Load the Excel interop assembly
Add-Type -AssemblyName Microsoft.Office.Interop.Excel

# Set the path to the Excel file
$excelFilePath = "C:\Path\To\Your\File.xlsx"

# Create a new Excel application
$excel = New-Object -ComObject Excel.Application

# Open the workbook
$workbook = $excel.Workbooks.Open($excelFilePath)

# Select the first worksheet
$worksheet = $workbook.Worksheets.Item(1)

# Find the last row and column with data
$maxRow = $worksheet.UsedRange.Rows.Count
$maxCol = $worksheet.UsedRange.Columns.Count

# Loop through each row in the worksheet
for ($row = 2; $row -le $maxRow; $row++) {
    # Read values from the current row
    $ID = $worksheet.Cells.Item($row, 1).Value2
    $description = $worksheet.Cells.Item($row, 2).Value2
    $Jobname = $worksheet.Cells.Item($row, 3).Value2
    $SourceFolderPath = $worksheet.Cells.Item($row, 4).Value2
    $DestinationFolderPath = $worksheet.Cells.Item($row, 5).Value2
    $OutputFilename = $worksheet.Cells.Item($row, 6).Value2
    $SQL = $worksheet.Cells.Item($row, 7).Value2
    $Oracle = $worksheet.Cells.Item($row, 8).Value2
    $JobStatus = $worksheet.Cells.Item($row, 9).Value2

    # Check if the Job status is "completed"
    if ($JobStatus -eq "completed") {
        # Construct the source and destination file paths
        $sourceFile = Join-Path -Path $SourceFolderPath -ChildPath $OutputFilename
        $destinationFile = Join-Path -Path $DestinationFolderPath -ChildPath $OutputFilename

        # Check if file exists and has data
        if (Test-Path $sourceFile -PathType Leaf) {
            $fileSize = (Get-Item $sourceFile).Length
            if ($fileSize -gt 0) {
                # Check file size and perform redirection based on file extension
                if ($fileSize -gt 10000) {
                    # Redirect to DBComparison.exe
                    Start-Process -FilePath "DBComparison.exe" -ArgumentList $sourceFile, $destinationFile -Wait
                } elseif ($fileSize -lt 100000 -and $OutputFilename -like "*.xlsx") {
                    # Redirect to Excel_Comparsion.exe for .xlsx files
                    Start-Process -FilePath "Excel_Comparsion.exe" -ArgumentList $sourceFile, $destinationFile -Wait
                } else {
                    # Redirect to Text_Comparison.exe for other file extensions
                    Start-Process -FilePath "Text_Comparison.exe" -ArgumentList $sourceFile, $destinationFile -Wait
                }

                # Copy the file from source folder to destination folder
                Copy-Item -Path $sourceFile -Destination $destinationFile -Force
                Write-Host "File '$OutputFilename' copied from '$SourceFolderPath' to '$DestinationFolderPath'."
            } else {
                Write-Host "File '$OutputFilename' in '$SourceFolderPath' is empty."
            }
        } else {
            Write-Host "File '$OutputFilename' not found in '$SourceFolderPath'."
        }
    } else {
        Write-Host "Job for file '$OutputFilename' is not completed."
    }
}

# Close the workbook and Excel application
$workbook.Close()
$excel.Quit()

# Release COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($worksheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
Remove-Variable excel, workbook, worksheet

# Clear clipboard (if used)
[GC]::Collect()
[GC]::WaitForPendingFinalizers()

Write-Host "Script execution completed."

