using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace YourNamespace.Services
{
    public class ConfigComparisonService
    {
        public class ComparisonResult
        {
            public string FileName { get; set; }
            public string SourceFile { get; set; }
            public string DestinationFile { get; set; }
            public string Result { get; set; }
            public string SourceMismatchLines { get; set; }
            public string DestinationMismatchLines { get; set; }
        }

        public List<ComparisonResult> CompareFiles(List<(string Source, string Destination)> filePairs)
        {
            var results = new List<ComparisonResult>();

            foreach (var pair in filePairs)
            {
                var sourceFilePath = pair.Source;
                var destinationFilePath = pair.Destination;

                if (File.Exists(sourceFilePath) && File.Exists(destinationFilePath))
                {
                    var sourceFileContent = File.ReadAllLines(sourceFilePath);
                    var destinationFileContent = File.ReadAllLines(destinationFilePath);

                    var mismatchSourceLines = new List<string>();
                    var mismatchDestinationLines = new List<string>();

                    for (int i = 0; i < Math.Min(sourceFileContent.Length, destinationFileContent.Length); i++)
                    {
                        if (sourceFileContent[i] != destinationFileContent[i])
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    if (sourceFileContent.Length > destinationFileContent.Length)
                    {
                        for (int i = destinationFileContent.Length; i < sourceFileContent.Length; i++)
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                        }
                    }
                    else if (sourceFileContent.Length < destinationFileContent.Length)
                    {
                        for (int i = sourceFileContent.Length; i < destinationFileContent.Length; i++)
                        {
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourceFilePath),
                        SourceFile = sourceFilePath,
                        DestinationFile = destinationFilePath,
                        Result = mismatchSourceLines.Count == 0 && mismatchDestinationLines.Count == 0 ? "Matching" : "Not Matching",
                        SourceMismatchLines = string.Join("\n", mismatchSourceLines),
                        DestinationMismatchLines = string.Join("\n", mismatchDestinationLines)
                    });
                }
                else
                {
                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourceFilePath),
                        SourceFile = sourceFilePath,
                        DestinationFile = destinationFilePath,
                        Result = "One or both files not found",
                        SourceMismatchLines = string.Empty,
                        DestinationMismatchLines = string.Empty
                    });
                }
            }

            return results;
        }

        public string GenerateHtmlReport(List<ComparisonResult> results)
        {
            var sb = new StringBuilder();
            sb.AppendLine("<html><head><title>Comparison Report</title><style>table {border-collapse: collapse;} th, td {border: 1px solid black; padding: 5px;}</style></head><body>");
            sb.AppendLine("<h1>Comparison Report</h1>");
            sb.AppendLine("<table><tr><th>FileName</th><th>SourceFile</th><th>DestinationFile</th><th>Result</th><th>Source Mismatch Lines</th><th>Destination Mismatch Lines</th></tr>");

            foreach (var result in results)
            {
                sb.AppendLine("<tr>");
                sb.AppendLine($"<td>{result.FileName}</td>");
                sb.AppendLine($"<td>{result.SourceFile}</td>");
                sb.AppendLine($"<td>{result.DestinationFile}</td>");
                sb.AppendLine($"<td>{result.Result}</td>");
                sb.AppendLine($"<td>{result.SourceMismatchLines.Replace("\n", "<br>")}</td>");
                sb.AppendLine($"<td>{result.DestinationMismatchLines.Replace("\n", "<br>")}</td>");
                sb.AppendLine("</tr>");
            }

            sb.AppendLine("</table></body></html>");
            return sb.ToString();
        }
    }
}


using Microsoft.AspNetCore.Mvc.RazorPages;
using YourNamespace.Services;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;

namespace YourNamespace.Pages
{
    public class FileComparisonModel : PageModel
    {
        private readonly ConfigComparisonService _configComparisonService;

        public string HtmlReport { get; private set; }

        public FileComparisonModel(ConfigComparisonService configComparisonService)
        {
            _configComparisonService = configComparisonService;
        }

        public void OnGet()
        {
            var filePairs = new List<(string Source, string Destination)>
            {
                (@"C:\Path\To\Source\File1.web.config", @"C:\Path\To\Destination\File1.web.config"),
                (@"C:\Path\To\Source\File2.web.config", @"C:\Path\To\Destination\File2.web.config")
            };

            var results = _configComparisonService.CompareFiles(filePairs);
            HtmlReport = _configComparisonService.GenerateHtmlReport(results);
        }
    }
}


@page
@model YourNamespace.Pages.FileComparisonModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Comparison</title>
</head>
<body>
    <div>
        @Html.Raw(Model.HtmlReport)
    </div>
</body>
</html>
