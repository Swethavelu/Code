using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace YourNamespace.Services
{
    public class ConfigComparisonService
    {
        public class ComparisonResult
        {
            public string FileName { get; set; }
            public string SourceFile { get; set; }
            public string DestinationFile { get; set; }
            public string Result { get; set; }
            public string SourceMismatchLines { get; set; }
            public string DestinationMismatchLines { get; set; }
        }

        public List<ComparisonResult> CompareFiles(List<(string Source, string Destination)> filePairs)
        {
            var results = new List<ComparisonResult>();

            foreach (var pair in filePairs)
            {
                var sourceFilePath = pair.Source;
                var destinationFilePath = pair.Destination;

                if (File.Exists(sourceFilePath) && File.Exists(destinationFilePath))
                {
                    var sourceFileContent = File.ReadAllLines(sourceFilePath);
                    var destinationFileContent = File.ReadAllLines(destinationFilePath);

                    var mismatchSourceLines = new List<string>();
                    var mismatchDestinationLines = new List<string>();

                    for (int i = 0; i < Math.Min(sourceFileContent.Length, destinationFileContent.Length); i++)
                    {
                        if (sourceFileContent[i] != destinationFileContent[i])
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    if (sourceFileContent.Length > destinationFileContent.Length)
                    {
                        for (int i = destinationFileContent.Length; i < sourceFileContent.Length; i++)
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                        }
                    }
                    else if (sourceFileContent.Length < destinationFileContent.Length)
                    {
                        for (int i = sourceFileContent.Length; i < destinationFileContent.Length; i++)
                        {
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourceFilePath),
                        SourceFile = sourceFilePath,
                        DestinationFile = destinationFilePath,
                        Result = mismatchSourceLines.Count == 0 && mismatchDestinationLines.Count == 0 ? "Matching" : "Not Matching",
                        SourceMismatchLines = string.Join("\n", mismatchSourceLines),
                        DestinationMismatchLines = string.Join("\n", mismatchDestinationLines)
                    });
                }
                else
                {
                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourceFilePath),
                        SourceFile = sourceFilePath,
                        DestinationFile = destinationFilePath,
                        Result = "One or both files not found",
                        SourceMismatchLines = string.Empty,
                        DestinationMismatchLines = string.Empty
                    });
                }
            }

            return results;
        }

        public string GenerateHtmlReport(List<ComparisonResult> results)
        {
            var sb = new StringBuilder();
            sb.AppendLine("<html><head><title>Comparison Report</title><style>table {border-collapse: collapse;} th, td {border: 1px solid black; padding: 5px;}</style></head><body>");
            sb.AppendLine("<h1>Comparison Report</h1>");
            sb.AppendLine("<table><tr><th>FileName</th><th>SourceFile</th><th>DestinationFile</th><th>Result</th><th>Source Mismatch Lines</th><th>Destination Mismatch Lines</th></tr>");

            foreach (var result in results)
            {
                sb.AppendLine("<tr>");
                sb.AppendLine($"<td>{result.FileName}</td>");
                sb.AppendLine($"<td>{result.SourceFile}</td>");
                sb.AppendLine($"<td>{result.DestinationFile}</td>");
                sb.AppendLine($"<td>{result.Result}</td>");
                sb.AppendLine($"<td>{result.SourceMismatchLines.Replace("\n", "<br>")}</td>");
                sb.AppendLine($"<td>{result.DestinationMismatchLines.Replace("\n", "<br>")}</td>");
                sb.AppendLine("</tr>");
            }

            sb.AppendLine("</table></body></html>");
            return sb.ToString();
        }
    }
}


using Microsoft.AspNetCore.Mvc.RazorPages;
using YourNamespace.Services;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;

namespace YourNamespace.Pages
{
    public class FileComparisonModel : PageModel
    {
        private readonly ConfigComparisonService _configComparisonService;

        public string HtmlReport { get; private set; }

        public FileComparisonModel(ConfigComparisonService configComparisonService)
        {
            _configComparisonService = configComparisonService;
        }

        public void OnGet()
        {
            var filePairs = new List<(string Source, string Destination)>
            {
                (@"C:\Path\To\Source\File1.web.config", @"C:\Path\To\Destination\File1.web.config"),
                (@"C:\Path\To\Source\File2.web.config", @"C:\Path\To\Destination\File2.web.config")
            };

            var results = _configComparisonService.CompareFiles(filePairs);
            HtmlReport = _configComparisonService.GenerateHtmlReport(results);
        }
    }
}


@page
@model YourNamespace.Pages.FileComparisonModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Comparison</title>
</head>
<body>
    <div>
        @Html.Raw(Model.HtmlReport)
    </div>
</body>
</html>


@page
@model IndexModel
@inject ConfigComparisonService ConfigComparisonService

<h1>File Comparison Tool</h1>

<form method="post">
    <div id="file-pairs">
        <div class="file-pair">
            <label>Source File:</label>
            <input type="text" name="FilePairs[0].Source" class="form-control" />
            <label>Destination File:</label>
            <input type="text" name="FilePairs[0].Destination" class="form-control" />
        </div>
    </div>
    <button type="button" id="add-file-pair">Add Another File Pair</button>
    <button type="submit">Compare Files</button>
</form>

@if (Model.Results != null && Model.Results.Any())
{
    <h2>Comparison Results</h2>
    <table class="table">
        <thead>
            <tr>
                <th>File Name</th>
                <th>Source File</th>
                <th>Destination File</th>
                <th>Result</th>
                <th>Source Mismatch Lines</th>
                <th>Destination Mismatch Lines</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.Results)
            {
                <tr>
                    <td>@result.FileName</td>
                    <td>@result.SourceFile</td>
                    <td>@result.DestinationFile</td>
                    <td>@result.Result</td>
                    <td>@result.SourceMismatchLines</td>
                    <td>@result.DestinationMismatchLines</td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        document.getElementById('add-file-pair').addEventListener('click', function () {
            var filePairsDiv = document.getElementById('file-pairs');
            var newIndex = filePairsDiv.children.length;
            var newPairHtml = `
                <div class="file-pair">
                    <label>Source File:</label>
                    <input type="text" name="FilePairs[${newIndex}].Source" class="form-control" />
                    <label>Destination File:</label>
                    <input type="text" name="FilePairs[${newIndex}].Destination" class="form-control" />
                </div>`;
            filePairsDiv.insertAdjacentHTML('beforeend', newPairHtml);
        });
    </script>
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using YourNamespace.Services;
using System.Collections.Generic;

public class IndexModel : PageModel
{
    private readonly ConfigComparisonService _configComparisonService;

    public IndexModel(ConfigComparisonService configComparisonService)
    {
        _configComparisonService = configComparisonService;
    }

    [BindProperty]
    public List<FilePair> FilePairs { get; set; } = new List<FilePair>();

    public List<ComparisonResult> Results { get; set; }

    public void OnPost()
    {
        Results = _configComparisonService.CompareFiles(FilePairs);
    }
}

public class FilePair
{
    public string Source { get; set; }
    public string Destination { get; set; }
}

public class ComparisonResult
{
    public string FileName { get; set; }
    public string SourceFile { get; set; }
    public string DestinationFile { get; set; }
    public string Result { get; set; }
    public string SourceMismatchLines { get; set; }
    public string DestinationMismatchLines { get; set; }
}

using System.Collections.Generic;
using System.IO;

namespace YourNamespace.Services
{
    public class ConfigComparisonService
    {
        public List<ComparisonResult> CompareFiles(List<FilePair> filePairs)
        {
            var results = new List<ComparisonResult>();

            foreach (var pair in filePairs)
            {
                var result = new ComparisonResult
                {
                    FileName = Path.GetFileName(pair.Source),
                    SourceFile = pair.Source,
                    DestinationFile = pair.Destination
                };

                if (File.Exists(pair.Source) && File.Exists(pair.Destination))
                {
                    var sourceFileContent = File.ReadAllLines(pair.Source);
                    var destinationFileContent = File.ReadAllLines(pair.Destination);

                    var mismatchSourceLines = new List<string>();
                    var mismatchDestinationLines = new List<string>();

                    for (int i = 0; i < System.Math.Min(sourceFileContent.Length, destinationFileContent.Length); i++)
                    {
                        if (sourceFileContent[i] != destinationFileContent[i])
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    if (sourceFileContent.Length > destinationFileContent.Length)
                    {
                        for (int i = destinationFileContent.Length; i < sourceFileContent.Length; i++)
                        {
                            mismatchSourceLines.Add($"{i + 1}. {sourceFileContent[i]}");
                        }
                    }
                    else if (sourceFileContent.Length < destinationFileContent.Length)
                    {
                        for (int i = sourceFileContent.Length; i < destinationFileContent.Length; i++)
                        {
                            mismatchDestinationLines.Add($"{i + 1}. {destinationFileContent[i]}");
                        }
                    }

                    if (mismatchSourceLines.Count == 0 && mismatchDestinationLines.Count == 0)
                    {
                        result.Result = "Matching";
                    }
                    else
                    {
                        result.Result = "Not Matching";
                    }

                    result.SourceMismatchLines = string.Join("\n", mismatchSourceLines);
                    result.DestinationMismatchLines = string.Join("\n", mismatchDestinationLines);
                }
                else
                {
                    result.Result = "One or both files not found";
                }

                results.Add(result);
            }

            return results;
        }
    }
}

≠====≠=============
using Microsoft.AspNetCore.Mvc.RazorPages;
using YourNamespace.Services; // Replace with the actual namespace of your service
using System.Collections.Generic;

namespace YourNamespace.Pages // Replace with your actual namespace
{
    public class IndexModel : PageModel
    {
        private readonly ConfigComparisonService _configComparisonService;

        public IndexModel(ConfigComparisonService configComparisonService)
        {
            _configComparisonService = configComparisonService;
        }

        public List<ComparisonResult> ComparisonResults { get; set; }

        public void OnGet()
        {
            // Initialize or handle any logic when the page is loaded
        }

        public void OnPostCompare(string[] sourcePaths, string[] destinationPaths)
        {
            // Use the service to perform the comparison and store the results
            ComparisonResults = _configComparisonService.CompareConfigs(sourcePaths, destinationPaths);
        }
    }
}



@page
@model YourNamespace.Pages.IndexModel

<h2>Config File Comparison</h2>

<form method="post">
    <div id="filePairs">
        <div>
            <label>Source Path:</label>
            <input type="text" name="sourcePaths" />
            <label>Destination Path:</label>
            <input type="text" name="destinationPaths" />
        </div>
    </div>
    <button type="button" onclick="addFilePair()">Add another file pair</button>
    <button type="submit" asp-page-handler="Compare">Compare</button>
</form>

@if (Model.ComparisonResults != null && Model.ComparisonResults.Count > 0)
{
    <h3>Comparison Results</h3>
    <table>
        <thead>
            <tr>
                <th>FileName</th>
                <th>Source File</th>
                <th>Destination File</th>
                <th>Result</th>
                <th>Source Mismatch Lines</th>
                <th>Destination Mismatch Lines</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.ComparisonResults)
            {
                <tr>
                    <td>@result.FileName</td>
                    <td>@result.SourceFile</td>
                    <td>@result.DestinationFile</td>
                    <td>@result.Result</td>
                    <td><pre>@result.SourceMismatchLines</pre></td>
                    <td><pre>@result.DestinationMismatchLines</pre></td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        function addFilePair() {
            var filePairsDiv = document.getElementById("filePairs");
            var newPairDiv = document.createElement("div");
            newPairDiv.innerHTML = '<label>Source Path:</label><input type="text" name="sourcePaths" /> <label>Destination Path:</label><input type="text" name="destinationPaths" />';
            filePairsDiv.appendChild(newPairDiv);
        }
    </script>
}


using System.Collections.Generic;
using System.IO;

namespace YourNamespace.Services
{
    public class ConfigComparisonService
    {
        public List<ComparisonResult> CompareConfigs(string[] sourcePaths, string[] destinationPaths)
        {
            var results = new List<ComparisonResult>();

            for (int i = 0; i < sourcePaths.Length; i++)
            {
                var sourcePath = sourcePaths[i];
                var destinationPath = destinationPaths[i];

                if (File.Exists(sourcePath) && File.Exists(destinationPath))
                {
                    var sourceFileContent = File.ReadAllLines(sourcePath);
                    var destinationFileContent = File.ReadAllLines(destinationPath);

                    var mismatchSourceLines = new List<string>();
                    var mismatchDestinationLines = new List<string>();

                    for (int j = 0; j < Math.Min(sourceFileContent.Length, destinationFileContent.Length); j++)
                    {
                        if (sourceFileContent[j] != destinationFileContent[j])
                        {
                            mismatchSourceLines.Add($"{j + 1}. {sourceFileContent[j]}");
                            mismatchDestinationLines.Add($"{j + 1}. {destinationFileContent[j]}");
                        }
                    }

                    // Handle cases where the files have different lengths
                    if (sourceFileContent.Length > destinationFileContent.Length)
                    {
                        for (int j = destinationFileContent.Length; j < sourceFileContent.Length; j++)
                        {
                            mismatchSourceLines.Add($"{j + 1}. {sourceFileContent[j]}");
                        }
                    }
                    else if (sourceFileContent.Length < destinationFileContent.Length)
                    {
                        for (int j = sourceFileContent.Length; j < destinationFileContent.Length; j++)
                        {
                            mismatchDestinationLines.Add($"{j + 1}. {destinationFileContent[j]}");
                        }
                    }

                    var result = mismatchSourceLines.Count == 0 && mismatchDestinationLines.Count == 0
                        ? "Matching"
                        : "Not Matching";

                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourcePath),
                        SourceFile = sourcePath,
                        DestinationFile = destinationPath,
                        Result = result,
                        SourceMismatchLines = string.Join("\n", mismatchSourceLines),
                        DestinationMismatchLines = string.Join("\n", mismatchDestinationLines)
                    });
                }
                else
                {
                    results.Add(new ComparisonResult
                    {
                        FileName = Path.GetFileName(sourcePath),
                        SourceFile = sourcePath,
                        DestinationFile = destinationPath,
                        Result = "One or both files not found",
                        SourceMismatchLines = "",
                        DestinationMismatchLines = ""
                    });
                }
            }

            return results;
        }
    }

    public class ComparisonResult
    {
        public string FileName { get; set; }
        public string SourceFile { get; set; }
        public string DestinationFile { get; set; }
        public string Result { get; set; }
        public string SourceMismatchLines { get; set; }
        public string DestinationMismatchLines { get; set; }
    }
}
