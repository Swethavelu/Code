# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    $htmlTable = "<h2>File Comparison Report</h2>"
    $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

    foreach ($destinationFolder in $destinationFolders) {
        $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
    }

    $htmlTable += "<th>Result</th></tr>"

    $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

    foreach ($file in $allFiles) {
        $htmlTable += "<tr>"
        $htmlTable += "<td>$($file.Name)</td>"

        # Display source file size and last write time
        $sourceSize = [math]::Ceiling($file.Length / 1KB)
        $sourceLastWriteTime = $file.LastWriteTime
        $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

        $matching = $false

        foreach ($destinationFolder in $destinationFolders) {
            $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

            if ($destinationFile) {
                $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                $destinationLastWriteTime = $destinationFile.LastWriteTime

                # Determine result (Matching or Not Matching)
                if ($sourceSize -eq $destinationSize) {
                    $matching = $true
                }

                $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
            } else {
                $htmlTable += "<td>Not Found</td>"
            }
        }

        # Display result based on file size and presence
        $result = if ($matching) {
            "Matching"
        } else {
            "Not Matching"
        }

        $htmlTable += "<td>$result</td>"
        $htmlTable += "</tr>"
    }

    $htmlTable += "</table>"

    # Save HTML report to a file with the current system date and time in the name
    $outputFilePath = Join-Path -Path $PSScriptRoot -ChildPath $outputFileName
    $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

    return $outputFilePath
}

# Configuration
$sourceFolder = "C:\Path\To\Source\Folder"
$destinationFolders = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2")

# Generate HTML report for file comparison and get the output file name
$outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $sourceFolder -destinationFolders $destinationFolders

# Display success message
Write-Host "File comparison report generated successfully at: $outputFilePath"


###########version 2
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    $htmlTable = "<h2>File Comparison Report</h2>"

    # Source and Destination Folders
    $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"
    $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
    foreach ($destinationFolder in $destinationFolders) {
        $htmlTable += "<li>$destinationFolder</li>"
    }
    $htmlTable += "</ul>"

    # Result Table
    $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

    foreach ($destinationFolder in $destinationFolders) {
        $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
    }

    $htmlTable += "<th>Result</th></tr>"

    $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

    foreach ($file in $allFiles) {
        $htmlTable += "<tr>"
        $htmlTable += "<td>$($file.Name)</td>"

        # Display source file size and last write time
        $sourceSize = [math]::Ceiling($file.Length / 1KB)
        $sourceLastWriteTime = $file.LastWriteTime
        $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

        $matching = $false

        foreach ($destinationFolder in $destinationFolders) {
            $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

            if ($destinationFile) {
                $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                $destinationLastWriteTime = $destinationFile.LastWriteTime

                # Determine result (Matching or Not Matching)
                if ($sourceSize -eq $destinationSize) {
                    $matching = $true
                }

                $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
            } else {
                $htmlTable += "<td>Not Found</td>"
            }
        }

        # Display result based on file size and presence
        $result = if ($matching) {
            "Matching"
        } else {
            "Not Matching"
        }

        $htmlTable += "<td>$result</td>"
        $htmlTable += "</tr>"
    }

    $htmlTable += "</table>"

    # Save HTML report to a file with the current system date and time in the name
    $outputFilePath = Join-Path -Path $PSScriptRoot -ChildPath $outputFileName
    $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

    return $outputFilePath
}

# Configuration
$sourceFolder = "C:\Path\To\Source\Folder"
$destinationFolders = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2")

# Generate HTML report for file comparison and get the output file name
$outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $sourceFolder -destinationFolders $destinationFolders

# Display success message
Write-Host "File comparison report generated successfully at: $outputFilePath"


######################version 3
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    $htmlTable = "<h2>File Comparison Report</h2>"

    # Source and Destination Folders
    $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"
    $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
    foreach ($destinationFolder in $destinationFolders) {
        $htmlTable += "<li>$destinationFolder</li>"
    }
    $htmlTable += "</ul>"

    # Result Table
    $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

    foreach ($destinationFolder in $destinationFolders) {
        $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
    }

    $htmlTable += "<th>Result</th></tr>"

    $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

    foreach ($file in $allFiles) {
        $htmlTable += "<tr>"
        $htmlTable += "<td>$($file.Name)</td>"

        # Display source file size and last write time
        $sourceSize = [math]::Ceiling($file.Length / 1KB)
        $sourceLastWriteTime = $file.LastWriteTime
        $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

        $matching = $false

        foreach ($destinationFolder in $destinationFolders) {
            $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

            if ($destinationFile) {
                $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                $destinationLastWriteTime = $destinationFile.LastWriteTime

                # Determine result (Matching or Not Matching)
                if ($sourceSize -eq $destinationSize) {
                    $matching = $true
                }

                $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
            } else {
                $htmlTable += "<td>Not Found</td>"
            }
        }

        # Display result based on file size and presence
        $result = if ($matching) {
            "Matching"
        } else {
            "Not Matching"
        }

        $htmlTable += "<td>$result</td>"
        $htmlTable += "</tr>"
    }

    $htmlTable += "</table>"

    # Save HTML report to a file with the current system date and time in the name
    $outputFilePath = Join-Path -Path $PSScriptRoot -ChildPath $outputFileName
    $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

    return $outputFilePath
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2") },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4") }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations

    # Display success message for each iteration
    Write-Host "File comparison report generated successfully at: $outputFilePath"
}

}
#############################version4
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source and Destination Folders
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"
        $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<li>$destinationFolder</li>"
        }
        $htmlTable += "</ul>"

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $false

            foreach ($destinationFolder in $destinationFolders) {
                $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -eq $destinationSize) {
                        $matching = $true
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    $htmlTable += "<td>Not Found</td>"
                }
            }

            # Display result based on file size and presence
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory

    # Display success message for each iteration
    if ($outputFilePath) {
        Write-Host "File comparison report generated successfully at: $outputFilePath"
    }
}

###############################version5
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source and Destination Folders
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"
        $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<li>$destinationFolder</li>"
        }
        $htmlTable += "</ul>"

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        $allDDLFiles = Get-ChildItem -Path $sourceFolder -Filter *.ddl -File -Recurse | Sort-Object FullName
        $allJARFiles = Get-ChildItem -Path $sourceFolder -Filter *.jar -File -Recurse | Sort-Object FullName

        $allFiles = $allDDLFiles + $allJARFiles

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $false

            foreach ($destinationFolder in $destinationFolders) {
                $destinationFile = Get-ChildItem -Path $destinationFolder -Filter $file.Name -File -Recurse

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -eq $destinationSize) {
                        $matching = $true
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    $htmlTable += "<td>Not Found</td>"
                }
            }

            # Display result based on file size and presence
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory

    # Display success message for each iteration
    if ($outputFilePath) {
        Write-Host "File comparison report generated successfully at: $outputFilePath"
    }
}

################################### Version 6
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source Folder
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"

        # Destination Folders
        $htmlTable += "<p><b>Destination Folders:</b></p>"
        for ($i = 0; $i -lt $destinationFolders.Count; $i++) {
            $htmlTable += "<p><b>Destination $($i+1):</b> $($destinationFolders[$i])</p>"
        }

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>$($destinationFolder | Split-Path -Leaf) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $false

            foreach ($destinationFolder in $destinationFolders) {
                $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -eq $destinationSize) {
                        $matching = $true
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    $htmlTable += "<td>Not Found</td>"
                }
            }

            # Display result based on file size and presence
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory

    # Display success message for each iteration
    if ($outputFilePath) {
        Write-Host "File comparison report generated successfully at: $outputFilePath"
    }
}

################################ Version 7
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source Folder
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"

        # Destination Folders
        $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
        $destIndex = 1
        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<li>Destination ${destIndex}: $destinationFolder</li>"
            $destIndex++
        }
        $htmlTable += "</ul>"

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>Destination $($destinationFolders.IndexOf($destinationFolder) + 1) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $false

            foreach ($destinationFolder in $destinationFolders) {
                $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -eq $destinationSize) {
                        $matching = $true
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    $htmlTable += "<td>File Not Found: $($destinationFolders[$destinationFolders.IndexOf($destinationFolder)])</td>"
                }
            }

            # Display result based on file size and presence
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory

    # Display success message for each iteration
    if ($outputFilePath) {
        Write-Host "File comparison report generated successfully at: $outputFilePath"
    }
}

################ version 8
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source Folder
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"

        # Destination Folders
        $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
        $destIndex = 1
        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<li>Destination ${destIndex}: $destinationFolder</li>"
            $destIndex++
        }
        $htmlTable += "</ul>"

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>Destination $($destinationFolders.IndexOf($destinationFolder) + 1) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $true

            foreach ($destinationFolder in $destinationFolders) {
                $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -ne $destinationSize) {
                        $matching = $false
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    $matching = $false
                    $htmlTable += "<td>File Not Found: $($destinationFolders[$destinationFolders.IndexOf($destinationFolder)])</td>"
                }
            }

            # Display result as "Not Matching" if file not found in any destination, otherwise based on file size matching
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory

    # Display success message for each iteration
    if ($outputFilePath) {
        Write-Host "File comparison report generated successfully at: $outputFilePath"
    }
}

####################version 9
# Function to generate HTML table for file comparison result
function Generate-FileComparisonHTMLTable {
    param (
        [string]$sourceFolder,
        [array]$destinationFolders,
        [string]$outputDirectory
    )

    # Get the current system date and time for the output file name
    $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFileName = "FileComparisonReport_$currentDateTime.html"

    # Check if $outputDirectory is not empty
    if (-not [string]::IsNullOrEmpty($outputDirectory)) {
        # Construct the full output file path
        $outputFilePath = Join-Path -Path $outputDirectory -ChildPath $outputFileName

        $htmlTable = "<h2>File Comparison Report</h2>"

        # Source Folder
        Write-Host "Processing Source Folder: $sourceFolder"
        $htmlTable += "<p><b>Source Folder:</b> $sourceFolder</p>"

        # Destination Folders
        $htmlTable += "<p><b>Destination Folders:</b></p><ul>"
        $destIndex = 1
        foreach ($destinationFolder in $destinationFolders) {
            Write-Host "Processing Destination Folder $destIndex: $destinationFolder"
            $htmlTable += "<li>Destination ${destIndex}: $destinationFolder</li>"
            $destIndex++
        }
        $htmlTable += "</ul>"

        # Result Table
        $htmlTable += "<table border='1'><tr><th>File Name</th><th>Source Folder Size</th>"

        foreach ($destinationFolder in $destinationFolders) {
            $htmlTable += "<th>Destination $($destinationFolders.IndexOf($destinationFolder) + 1) Size</th>"
        }

        $htmlTable += "<th>Result</th></tr>"

        # Calculate source folder size
        $sourceFolderSize = Get-ChildItem $sourceFolder -File -Recurse | Measure-Object -Property Length -Sum | Select-Object -ExpandProperty Sum

        $destinationSizes = @{}
        foreach ($destinationFolder in $destinationFolders) {
            # Calculate destination folder size
            $destinationSizes[$destinationFolder] = Get-ChildItem $destinationFolder -File -Recurse | Measure-Object -Property Length -Sum | Select-Object -ExpandProperty Sum
        }

        $allFiles = Get-ChildItem -Path $sourceFolder -File -Recurse | Sort-Object FullName

        foreach ($file in $allFiles) {
            $htmlTable += "<tr>"
            $htmlTable += "<td>$($file.Name)</td>"

            # Display source file size and last write time
            $sourceSize = [math]::Ceiling($file.Length / 1KB)
            $sourceLastWriteTime = $file.LastWriteTime
            $htmlTable += "<td>$sourceSize KB<br>$sourceLastWriteTime</td>"

            $matching = $true

            foreach ($destinationFolder in $destinationFolders) {
                Write-Host "Checking file $($file.Name) in Destination Folder: $destinationFolder"
                $destinationFile = $null
                if ($destinationSizes[$destinationFolder]) {
                    $destinationFile = Get-ChildItem -Path $destinationFolder -File -Recurse | Where-Object { $_.Name -eq $file.Name }
                }

                if ($destinationFile) {
                    $destinationSize = [math]::Ceiling($destinationFile.Length / 1KB)
                    $destinationLastWriteTime = $destinationFile.LastWriteTime

                    # Determine result (Matching or Not Matching)
                    if ($sourceSize -ne $destinationSize) {
                        $matching = $false
                    }

                    $htmlTable += "<td>$destinationSize KB<br>$destinationLastWriteTime</td>"
                } else {
                    Write-Host "File $($file.Name) not found in Destination Folder: $destinationFolder"
                    $matching = $false
                    $htmlTable += "<td>File Not Found: $($destinationFolders[$destinationFolders.IndexOf($destinationFolder)])</td>"
                }
            }

            # Display result as "Not Matching" if file not found in any destination, otherwise based on file size matching
            $result = if ($matching) {
                "Matching"
            } else {
                "Not Matching"
            }

            $htmlTable += "<td>$result</td>"
            $htmlTable += "</tr>"
        }

        $htmlTable += "</table>"

        # Save HTML report to the specified output directory
        $htmlTable | Out-File -FilePath $outputFilePath -Encoding UTF8

        Write-Host "File comparison report generated successfully at: $outputFilePath"
        return $outputFilePath
    } else {
        Write-Host "Output directory is empty. Cannot generate HTML report."
        return $null
    }
}

# Loop through multiple source and destination folder pairs
$folderPairs = @(
    @{ Source = "C:\Path\To\Source\Folder1"; Destinations = @("C:\Path\To\Destination\Folder1", "C:\Path\To\Destination\Folder2"); OutputDirectory = "C:\Output\Reports\Folder1" },
    @{ Source = "C:\Path\To\Source\Folder2"; Destinations = @("C:\Path\To\Destination\Folder3", "C:\Path\To\Destination\Folder4"); OutputDirectory = "D:\Output\Reports\Folder2" }
    # Add more pairs as needed
)

foreach ($pair in $folderPairs) {
    # Generate HTML report for file comparison and get the output file name
    $outputFilePath = Generate-FileComparisonHTMLTable -sourceFolder $pair.Source -destinationFolders $pair.Destinations -outputDirectory $pair.OutputDirectory
}

