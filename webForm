Form1.cs
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json;

namespace LoginApp
{
    public partial class LoginForm : Form
    {
        public LoginForm()
        {
            InitializeComponent();
        }

        private async void LoginButton_Click(object sender, EventArgs e)
        {
            string username = usernameTextBox.Text;
            string password = passwordTextBox.Text;

            if (string.IsNullOrEmpty(username))
            {
                messageLabel.Text = "Username is required";
                return;
            }
            else if (username.Length < 7)
            {
                messageLabel.Text = "Username should contain at least 7 characters";
                return;
            }

            if (string.IsNullOrEmpty(password))
            {
                messageLabel.Text = "Password is required";
                return;
            }
            else if (password.Length < 8 || password.Length > 18)
            {
                messageLabel.Text = "Password should be between 8 and 18 characters";
                return;
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string mergedCredentials = username + ":" + password;
                    byte[] byteCredentials = Encoding.UTF8.GetBytes(mergedCredentials);
                    string encodedCredentials = Convert.ToBase64String(byteCredentials);

                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", encodedCredentials);

                    string projectName = CustomConfigurationManager.GetAppSetting("projects");

                    if (string.IsNullOrEmpty(projectName))
                    {
                        messageLabel.Text = "Project name is not configured.";
                        return;
                    }

                    string repoApiUrl = "https://SCM.com/" + projectName;
                    HttpResponseMessage response = await client.GetAsync(repoApiUrl);

                    if (!response.IsSuccessStatusCode)
                    {
                        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        {
                            messageLabel.Text = "Unauthorized! You are not permitted to access this site";
                        }
                        else
                        {
                            messageLabel.Text = "Login failed!";
                        }
                    }
                    else
                    {
                        string userInfoUrl = "https://SCM.com/" + username;
                        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", encodedCredentials);
                        HttpResponseMessage userInfoResponse = await client.GetAsync(userInfoUrl);

                        string userInfoJson = await userInfoResponse.Content.ReadAsStringAsync();
                        var userInfo = JsonConvert.DeserializeObject<UserInfo>(userInfoJson);

                        // Handle successful login
                        messageLabel.Text = "Login successful!";
                        userInfoLabel.Text = $"Welcome, {userInfo.displayName}";

                        // Navigate to Form2
                        var form2 = new Form2();
                        form2.Show();
                        this.Hide();
                    }
                }
            }
            catch (Exception ex)
            {
                messageLabel.Text = "An error occurred: " + ex.Message;
            }
        }
    }

    public class UserInfo
    {
        public string displayName { get; set; }
    }
}

Form2.cs
namespace LoginApp
{
    partial class Form2
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.branchNameLabel = new System.Windows.Forms.Label();
            this.branchNameTextBox = new System.Windows.Forms.TextBox();
            this.batchLabel = new System.Windows.Forms.Label();
            this.batchComboBox = new System.Windows.Forms.ComboBox();
            this.getRepositoryButton = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // branchNameLabel
            // 
            this.branchNameLabel.AutoSize = true;
            this.branchNameLabel.Location = new System.Drawing.Point(13, 13);
            this.branchNameLabel.Name = "branchNameLabel";
            this.branchNameLabel.Size = new System.Drawing.Size(78, 13);
            this.branchNameLabel.TabIndex = 0;
            this.branchNameLabel.Text = "Branch Name *";
            // 
            // branchNameTextBox
            // 
            this.branchNameTextBox.Location = new System.Drawing.Point(97, 10);
            this.branchNameTextBox.Name = "branchNameTextBox";
            this.branchNameTextBox.Size = new System.Drawing.Size(200, 20);
            this.branchNameTextBox.TabIndex = 1;
            // 
            // batchLabel
            // 
            this.batchLabel.AutoSize = true;
            this.batchLabel.Location = new System.Drawing.Point(303, 13);
            this.batchLabel.Name = "batchLabel";
            this.batchLabel.Size = new System.Drawing.Size(37, 13);
            this.batchLabel.TabIndex = 2;
            this.batchLabel.Text = "Batch*";
            // 
            // batchComboBox
            // 
            this.batchComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.batchComboBox.FormattingEnabled = true;
            this.batchComboBox.Items.AddRange(new object[] {
            "Pre Batch",
            "Post Batch",
            "Both"});
            this.batchComboBox.Location = new System.Drawing.Point(346, 10);
            this.batchComboBox.Name = "batchComboBox";
            this.batchComboBox.Size = new System.Drawing.Size(121, 21);
            this.batchComboBox.TabIndex = 3;
            // 
            // getRepositoryButton
            // 
            this.getRepositoryButton.Location = new System.Drawing.Point(473, 8);
            this.getRepositoryButton.Name = "getRepositoryButton";
            this.getRepositoryButton.Size = new System.Drawing.Size(100, 23);
            this.getRepositoryButton.TabIndex = 4;
            this.getRepositoryButton.Text = "Get Repository";
            this.getRepositoryButton.UseVisualStyleBackColor = true;
            // 
            // Form2
            // 
            this.ClientSize = new System.Drawing.Size(584, 61);
            this.Controls.Add(this.getRepositoryButton);
            this.Controls.Add(this.batchComboBox);
            this.Controls.Add(this.batchLabel);
            this.Controls.Add(this.branchNameTextBox);
            this.Controls.Add(this.branchNameLabel);
            this.Name = "Form2";
            this.Text = "Search Criteria";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private System.Windows.Forms.Label branchNameLabel;
        private System.Windows.Forms.TextBox branchNameTextBox;
        private System.Windows.Forms.Label batchLabel;
        private System.Windows.Forms.ComboBox batchComboBox;
        private System.Windows.Forms.Button getRepositoryButton;
    }
}


//updated
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json;

public static class ListExtensions
{
    public static List<T> ByIndex<T>(this List<T> value, int startIndex, int endIndex) => value.GetRange(startIndex, endIndex);
}

public static class TempDataExtension
{
    public static void Put<T>(this IDictionary<string, object> tempData, string key, List<T> value) where T : class
    {
        string userObj = JsonConvert.SerializeObject(value);
        tempData[key] = JsonConvert.DeserializeObject<List<T>>(userObj);
    }

    public static List<T> Get<T>(this IDictionary<string, object> tempData, string key) where T : class
    {
        if (tempData.TryGetValue(key, out var o))
        {
            string getObj = JsonConvert.SerializeObject(o);
            return o == null ? null : JsonConvert.DeserializeObject<List<T>>(getObj);
        }
        return null;
    }
}

public partial class Form2 : Form
{
    private IDictionary<string, object> TempData = new Dictionary<string, object>();

    public Form2()
    {
        InitializeComponent();
    }

    private string GetProjectName()
    {
        return ConfigurationManager.AppSettings["projectName"];
    }

    private string GetDeploymentRepo()
    {
        return ConfigurationManager.AppSettings["deploymentRepo"];
    }

    private int GetLimit()
    {
        return int.Parse(ConfigurationManager.AppSettings["limit"]);
    }

    private string GetEncodedCredentials()
    {
        string mergedCredentials = string.Format("username:password", "UserName", "Password");
        byte[] byteCredentials = Encoding.UTF8.GetBytes(mergedCredentials);
        return Convert.ToBase64String(byteCredentials);
    }

    private List<SelectListItem> ToSelectList(DataTable table, string valueField, string textField)
    {
        var list = new List<SelectListItem>();
        foreach (DataRow row in table.Rows)
        {
            list.Add(new SelectListItem
            {
                Text = row[textField].ToString(),
                Value = row[valueField].ToString()
            });
        }
        return list;
    }

    private async Task<Repo> GetPrSummaryAsync(string id)
    {
        return await RepoPRSummary(id);
    }

    private async Task<Repo> RepoPRSummary(string id)
    {
        string loginStr = ConvertLoginObjectToString();
        var loginViewModel = JsonConvert.DeserializeObject<LoginViewModel>(loginStr);

        using (HttpClient client = new HttpClient())
        {
            string pullRequestApiUrl = $"https://scm{GetProjectName()}/repos/{id}/pull-request/";
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", loginViewModel.EncodedUsernameAndPassword);

            HttpResponseMessage response = await client.GetAsync(pullRequestApiUrl);
            string createPrApi = await response.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject<Repo>(createPrApi);
        }
    }

    private string ConvertLoginObjectToString()
    {
        var loginDes = (LoginViewModel)TempData["login"];
        return JsonConvert.SerializeObject(loginDes);
    }

    // Example method to handle a button click event that triggers ListRepo logic
    private async void btnListRepo_Click(object sender, EventArgs e)
    {
        // Your logic to handle ListRepo
        // For example, you can call your methods like GetPrSummaryAsync, etc.
    }
}

// Example classes used in the original code, adapted for WinForms
public class Repo { }
public class RepoInputModel { }
public class LoginViewModel { public string EncodedUsernameAndPassword { get; set; } }
public class SelectListItem
{
    public string Text { get; set; }
    public string Value { get; set; }
}
