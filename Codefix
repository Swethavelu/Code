import os
import pandas as pd
from nicegui import ui
from analysis import analyse_fields
from col_rename import replace_columns
from git_commands import git_checkout, git_push


# ---------------- State Management ---------------- #

class State:
    def __init__(self):
        self.repo_path = ""
        self.excel_path = ""
        self.selected_sheets = []
        self.action = "Run Analysis"
        self.push_to_repo = False
        self.default_branch = ""
        self.branch_name = ""
        self.commit_message = ""

state = State()


# ---------------- Logic Functions ---------------- #

def validate_inputs() -> bool:
    """Ensure the repo and Excel paths are valid"""
    valid = True

    if state.repo_path and not os.path.isdir(state.repo_path):
        ui.notify("‚ùå Repository path does not exist or is not a directory", color="negative")
        valid = False

    if state.excel_path:
        if not os.path.exists(state.excel_path):
            ui.notify("‚ùå Excel file path does not exist", color="negative")
            valid = False
        elif not state.excel_path.lower().endswith((".xls", ".xlsx")):
            ui.notify("‚ùå File is not an Excel file (.xls or .xlsx)", color="negative")
            valid = False

    return valid


def run_action():
    """Perform the selected action: Analysis or Replacement"""
    if not validate_inputs():
        return

    try:
        if state.action == "Run Analysis":
            res = analyse_fields(state.selected_sheets, state.excel_path, state.repo_path)
            if res is True:
                ui.notify(f"‚úÖ Results updated in 'result' sheet of {state.excel_path}", color="positive")
            else:
                ui.notify(f"‚ùå Error during analysis: {res}", color="negative")

        elif state.action == "Replace Files":
            if state.push_to_repo:
                if state.default_branch and state.branch_name and state.commit_message:
                    git_checkout(state.repo_path, state.default_branch, state.branch_name, state.commit_message)
                    res = replace_columns(state.selected_sheets, state.excel_path)
                    if res is True:
                        ui.notify("‚úÖ Files updated with new column names", color="positive")
                        git_push(state.branch_name)
                        ui.notify(f"üöÄ Changes pushed to branch '{state.branch_name}'", color="positive")
                    else:
                        ui.notify("‚ùå Error renaming columns", color="negative")
                else:
                    ui.notify("‚ö†Ô∏è Please complete all git fields", color="warning")
            else:
                res = replace_columns(state.selected_sheets, state.excel_path)
                if res is True:
                    ui.notify("‚úÖ Files updated with new column names", color="positive")
                else:
                    ui.notify("‚ùå Error renaming columns", color="negative")

    except Exception as e:
        ui.notify(f"‚ùå Error: {e}", color="negative")


def load_sheets():
    """Read sheet names from Excel and populate multi-select"""
    if validate_inputs() and state.excel_path:
        try:
            xl = pd.ExcelFile(state.excel_path)
            ui.notify("üìÑ Excel loaded. Select sheets below.", color="info")
            with ui.expansion("Select Excel Sheets", value=True):
                ui.select(xl.sheet_names, multiple=True).bind_value_to(state, "selected_sheets")
        except Exception as e:
            ui.notify(f"‚ùå Error reading Excel: {e}", color="negative")


def toggle_push(checked: bool):
    """Render Git input fields if push_to_repo is enabled"""
    state.push_to_repo = checked
    if checked:
        with ui.column():
            ui.input("Default branch (e.g. main)").bind_value_to(state, "default_branch")
            ui.input("Branch name").bind_value_to(state, "branch_name")
            ui.input("Commit message").bind_value_to(state, "commit_message")


# ---------------- UI ---------------- #

ui.label("üõ†Ô∏è Rebase Agent").classes("text-2xl font-bold mb-4")

ui.input("Repository folder path").bind_value_to(state, "repo_path")
ui.input("Input Excel path").bind_value_to(state, "excel_path")

ui.button("üìÇ Load Sheets", on_click=load_sheets)

ui.radio(["Run Analysis", "Replace Files"], value="Run Analysis").bind_value_to(state, "action")

ui.checkbox("Push changes to repository?", on_change=lambda e: toggle_push(e.value)).bind_value_to(state, "push_to_repo")

ui.button("‚ñ∂Ô∏è Run Action", on_click=run_action, color="green")

# ---------------- App Run ---------------- #

ui.run(native=True, title="SQL Master")
