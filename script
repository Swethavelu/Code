# Define the source and destination folders
$sourceFolder = "C:\SourceFolder"
$destinationFolder = "C:\DestinationFolder"
$outputReportPath = "C:\ComparisonReport.html" # Default output HTML report path

# Get a list of web config files in the source folder
$sourceFiles = Get-ChildItem -Path $sourceFolder -Filter "*.config" -Recurse

# Create an array to store the comparison results
$results = @()

# Loop through each file in the source folder
foreach ($file in $sourceFiles) {
    # Construct the corresponding file path in the destination folder
    $destinationFilePath = $file.FullName.Replace($sourceFolder, $destinationFolder)

    # Check if the file exists in the destination folder
    if (Test-Path $destinationFilePath) {
        # Compare file sizes
        $sourceFileSize = (Get-Item $file.FullName).Length
        $destinationFileSize = (Get-Item $destinationFilePath).Length
        
        # Compare file contents
        $sourceFileContent = Get-Content $file.FullName
        $destinationFileContent = Get-Content $destinationFilePath
        
        # Compare file contents and generate the HTML difference report
        $comparisonReport = Compare-Object $sourceFileContent $destinationFileContent | 
                            ConvertTo-Html -Fragment |
                            Out-String
        
        # Check if the file contents are identical
        if ($sourceFileContent -eq $destinationFileContent) {
            $result = "Matching"
        } else {
            $result = "Not Matching"
        }
        
        # Add the comparison result to the results array
        $results += [PSCustomObject]@{
            FileName = $file.Name
            SourceFolder = $file.DirectoryName
            DestinationFolder = $destinationFilePath | Split-Path -Parent
            Result = $result
            ComparisonReport = $comparisonReport
        }
    }
}

# Generate the HTML report
$htmlReport = $results | ConvertTo-Html -Property FileName, SourceFolder, DestinationFolder, Result, ComparisonReport -Fragment

# Output the HTML report
$htmlReport | Out-File $outputReportPath
Write-Output "Comparison report has been saved to: $outputReportPath"

version 2:
# Define the source and destination folders
$sourceFolder = "C:\SourceFolder"
$destinationFolder = "C:\DestinationFolder"
$outputReportPath = "C:\ComparisonReport.html" # Default output HTML report path

# Get a list of web config files in the source folder
$sourceFiles = Get-ChildItem -Path $sourceFolder -Filter "*.config" -Recurse

# Create an array to store the comparison results
$results = @()

# Loop through each file in the source folder
foreach ($file in $sourceFiles) {
    # Construct the corresponding file path in the destination folder
    $destinationFilePath = $file.FullName.Replace($sourceFolder, $destinationFolder)

    # Check if the file exists in the destination folder
    if (Test-Path $destinationFilePath) {
        # Compare file sizes
        $sourceFileSize = (Get-Item $file.FullName).Length
        $destinationFileSize = (Get-Item $destinationFilePath).Length
        
        # Compare file contents
        $sourceFileContent = Get-Content $file.FullName
        $destinationFileContent = Get-Content $destinationFilePath
        
        # Compare file contents and generate the HTML difference report
        $diffReport = @()
        for ($i = 0; $i -lt $sourceFileContent.Count; $i++) {
            if ($sourceFileContent[$i] -ne $destinationFileContent[$i]) {
                $diffReport += [PSCustomObject]@{
                    LineNumber = $i + 1
                    SourceLine = $sourceFileContent[$i]
                    DestinationLine = $destinationFileContent[$i]
                }
            }
        }
        
        $comparisonReport = $diffReport | ConvertTo-Html -Fragment -Property LineNumber, SourceLine, DestinationLine
        
        # Create a HTML link to the side-by-side difference report
        $comparisonReportLink = "<a href='#' onclick='showDiffReport(this)' data-diff-report='$($comparisonReport | Out-String)'>View Difference Report</a>"
        
        # Check if the file contents are identical
        if ($sourceFileContent -eq $destinationFileContent) {
            $result = "Matching"
        } else {
            $result = "Not Matching"
        }
        
        # Add the comparison result to the results array
        $results += [PSCustomObject]@{
            FileName = $file.Name
            SourceFolder = $file.DirectoryName
            DestinationFolder = $destinationFilePath | Split-Path -Parent
            Result = $result
            ComparisonReportLink = $comparisonReportLink
        }
    }
}

# Generate the HTML report
$htmlReport = $results | ConvertTo-Html -Property FileName, SourceFolder, DestinationFolder, Result, ComparisonReportLink -Fragment

# Add JavaScript code to show the side-by-side difference report
$javascriptCode = @"
<script>
    function showDiffReport(element) {
        var diffReport = element.getAttribute('data-diff-report');
        var diffReportHtml = "<table border='1'>";
        diffReportHtml += "<tr><th>Line Number</th><th>Source Line</th><th>Destination Line</th></tr>";
        diffReport.split('<br>').forEach(function(line) {
            diffReportHtml += "<tr>" + line + "</tr>";
        });
        diffReportHtml += "</table>";
        var diffReportDialog = document.createElement('div');
        diffReportDialog.innerHTML = diffReportHtml;
        diffReportDialog.style.position = 'absolute';
        diffReportDialog.style.top = '50%';
        diffReportDialog.style.left = '50%';
        diffReportDialog.style.transform = 'translate(-50%, -50%)';
        diffReportDialog.style.background = 'white';
        diffReportDialog.style.padding = '10px';
        diffReportDialog.style.border = '1px solid black';
        document.body.appendChild(diffReportDialog);
    }
</script>
"@

# Output the HTML report
$htmlReport | Out-File $outputReportPath
$javascriptCode | Out-File -Append $outputReportPath
Write-Output "Comparison report has been saved to: $outputReportPath"

version 4
# Define the source and destination folders
$sourceFolder = "C:\SourceFolder"
$destinationFolder = "C:\DestinationFolder"
$outputReportPath = "C:\ComparisonReport.html" # Default output HTML report path

# Get a list of web config files in the source folder
$sourceFiles = Get-ChildItem -Path $sourceFolder -Filter "*.config" -Recurse

# Create an array to store the comparison results
$results = @()

# Loop through each file in the source folder
foreach ($file in $sourceFiles) {
    # Construct the corresponding file path in the destination folder
    $destinationFilePath = $file.FullName.Replace($sourceFolder, $destinationFolder)

    # Check if the file exists in the destination folder
    if (Test-Path $destinationFilePath) {
        # Compare file sizes
        $sourceFileSize = (Get-Item $file.FullName).Length
        $destinationFileSize = (Get-Item $destinationFilePath).Length
        
        # Compare file contents
        $sourceFileContent = Get-Content $file.FullName
        $destinationFileContent = Get-Content $destinationFilePath
        
        # Compare file contents and generate the HTML difference report
        $diffReport = @()
        for ($i = 0; $i -lt $sourceFileContent.Count; $i++) {
            if ($sourceFileContent[$i] -ne $destinationFileContent[$i]) {
                $diffReport += [PSCustomObject]@{
                    LineNumber = $i + 1
                    SourceLine = $sourceFileContent[$i]
                    DestinationLine = $destinationFileContent[$i]
                }
            }
        }
        
        # Create a HTML link to the side-by-side difference report
        $comparisonReportLink = "<a href='#' onclick='showDiffReport(this)' data-diff-report='$($diffReport | ConvertTo-Html -Fragment -Property LineNumber, SourceLine, DestinationLine | Out-String)'>View Difference Report</a>"
        
        # Check if the file contents are identical
        if ($sourceFileContent -eq $destinationFileContent) {
            $result = "Matching"
        } else {
            $result = "Not Matching"
        }
        
        # Add the comparison result to the results array
        $results += [PSCustomObject]@{
            FileName = $file.Name
            SourceFolder = $file.DirectoryName
            DestinationFolder = $destinationFilePath | Split-Path -Parent
            Result = $result
            ComparisonReportLink = $comparisonReportLink
        }
    }
}

# Generate the HTML report
$htmlReport = @"
<html>
<head>
    <title>Comparison Report</title>
    <style>
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Comparison Report</h1>
    <table>
        <tr>
            <th>FileName</th>
            <th>SourceFolder</th>
            <th>DestinationFolder</th>
            <th>Result</th>
            <th>Comparison Report</th>
        </tr>
"@ + ($results | ConvertTo-Html -Fragment) + @"
    </table>
    <script>
        function showDiffReport(element) {
            var diffReport = element.getAttribute('data-diff-report');
            var diffReportHtml = "<table border='1'>";
            diffReportHtml += "<tr><th>Line Number</th><th>Source Line</th><th>Destination Line</th></tr>";
            diffReport.split('<br>').forEach(function(line) {
                diffReportHtml += "<tr>" + line + "</tr>";
            });
            diffReportHtml += "</table>";
            var diffReportDialog = document.createElement('div');
            diffReportDialog.innerHTML = diffReportHtml;
            diffReportDialog.style.position = 'absolute';
            diffReportDialog.style.top = '50%';
            diffReportDialog.style.left = '50%';
            diffReportDialog.style.transform = 'translate(-50%, -50%)';
            diffReportDialog.style.background = 'white';
            diffReportDialog.style.padding = '10px';
            diffReportDialog.style.border = '1px solid black';
            document.body.appendChild(diffReportDialog);
        }
    </script>
</body>
</html>
"@

# Output the HTML report
$htmlReport | Out-File $outputReportPath
Write-Output "Comparison report has been saved to: $outputReportPath"

version 3
# Define the source and destination folders
$sourceFolder = "C:\SourceFolder"
$destinationFolder = "C:\DestinationFolder"
$outputReportPath = "C:\ComparisonReport.html" # Default output HTML report path

# Get a list of web config files in the source folder
$sourceFiles = Get-ChildItem -Path $sourceFolder -Filter "*.config" -Recurse

# Create an array to store the comparison results
$results = @()

# Loop through each file in the source folder
foreach ($file in $sourceFiles) {
    # Construct the corresponding file path in the destination folder
    $destinationFilePath = $file.FullName.Replace($sourceFolder, $destinationFolder)

    # Check if the file exists in the destination folder
    if (Test-Path $destinationFilePath) {
        # Compare file sizes
        $sourceFileSize = (Get-Item $file.FullName).Length
        $destinationFileSize = (Get-Item $destinationFilePath).Length
        
        # Compare file contents
        $sourceFileContent = Get-Content $file.FullName
        $destinationFileContent = Get-Content $destinationFilePath
        
        # Compare file contents and generate the HTML difference report
        $diffReport = @()
        for ($i = 0; $i -lt $sourceFileContent.Count; $i++) {
            if ($sourceFileContent[$i] -ne $destinationFileContent[$i]) {
                $diffReport += [PSCustomObject]@{
                    LineNumber = $i + 1
                    SourceLine = $sourceFileContent[$i]
                    DestinationLine = $destinationFileContent[$i]
                }
            }
        }
        
        # Create a HTML link to the side-by-side difference report
        $comparisonReportLink = "<a href='#' onclick='showDiffReport(this)' data-diff-report='$($diffReport | ConvertTo-Html -Fragment -Property LineNumber, SourceLine, DestinationLine | Out-String)'>View Difference Report</a>"
        
        # Check if the file contents are identical
        if ($sourceFileContent -eq $destinationFileContent) {
            $result = "Matching"
        } else {
            $result = "Not Matching"
        }
        
        # Add the comparison result to the results array
        $results += [PSCustomObject]@{
            FileName = $file.Name
            SourceFolder = $file.DirectoryName
            DestinationFolder = $destinationFilePath | Split-Path -Parent
            Result = $result
            ComparisonReportLink = $comparisonReportLink
        }
    }
}

# Generate the HTML report
$htmlReport = @"
<html>
<head>
    <title>Comparison Report</title>
    <style>
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Comparison Report</h1>
    <table>
        <tr>
            <th>FileName</th>
            <th>SourceFolder</th>
            <th>DestinationFolder</th>
            <th>Result</th>
            <th>Comparison Report</th>
        </tr>
"@ + ($results | ConvertTo-Html -Fragment) + @"
    </table>
    <script>
        function showDiffReport(element) {
            var diffReport = element.getAttribute('data-diff-report');
            var diffReportHtml = "<table border='1'>";
            diffReportHtml += "<tr><th>Line Number</th><th>Source Line</th><th>Destination Line</th></tr>";
            diffReport.split('<br>').forEach(function(line) {
                diffReportHtml += "<tr>" + line + "</tr>";
            });
            diffReportHtml += "</table>";
            var diffReportDialog = document.createElement('div');
            diffReportDialog.innerHTML = diffReportHtml;
            diffReportDialog.style.position = 'absolute';
            diffReportDialog.style.top = '50%';
            diffReportDialog.style.left = '50%';
            diffReportDialog.style.transform = 'translate(-50%, -50%)';
            diffReportDialog.style.background = 'white';
            diffReportDialog.style.padding = '10px';
            diffReportDialog.style.border = '1px solid black';
            document.body.appendChild(diffReportDialog);
        }
    </script>
</body>
</html>
"@

# Output the HTML report
$htmlReport | Out-File $outputReportPath
Write-Output "Comparison report has been saved to: $outputReportPath"

version 5
# Define the source and destination folders
$sourceFolder = "C:\SourceFolder"
$destinationFolder = "C:\DestinationFolder"
$outputReportPath = "C:\ComparisonReport.html" # Default output HTML report path

# Get a list of web config files in the source folder
$sourceFiles = Get-ChildItem -Path $sourceFolder -Filter "*.config" -Recurse

# Create an array to store the comparison results
$results = @()

# Loop through each file in the source folder
foreach ($file in $sourceFiles) {
    # Construct the corresponding file path in the destination folder
    $destinationFilePath = $file.FullName.Replace($sourceFolder, $destinationFolder)

    # Check if the file exists in the destination folder
    if (Test-Path $destinationFilePath) {
        # Compare file sizes
        $sourceFileSize = (Get-Item $file.FullName).Length
        $destinationFileSize = (Get-Item $destinationFilePath).Length
        
        # Compare file contents
        $sourceFileContent = Get-Content $file.FullName
        $destinationFileContent = Get-Content $destinationFilePath
        
        # Compare file contents and generate the HTML difference report
        $diffReport = @()
        for ($i = 0; $i -lt $sourceFileContent.Count; $i++) {
            if ($sourceFileContent[$i] -ne $destinationFileContent[$i]) {
                $diffReport += [PSCustomObject]@{
                    LineNumber = $i + 1
                    SourceLine = $sourceFileContent[$i]
                    DestinationLine = $destinationFileContent[$i]
                }
            }
        }
        
        # Create a HTML link to the side-by-side difference report
        $comparisonReportLink = "<a href='#' onclick='showDiffReport(this)' data-diff-report='$($diffReport | ConvertTo-Html -Fragment -Property LineNumber, SourceLine, DestinationLine | Out-String)'>View Difference Report</a>"
        
        # Check if the file contents are identical
        if ($sourceFileContent -eq $destinationFileContent) {
            $result = "Matching"
        } else {
            $result = "Not Matching"
        }
        
        # Add the comparison result to the results array
        $results += [PSCustomObject]@{
            FileName = $file.Name
            SourceFolder = $file.DirectoryName
            DestinationFolder = $destinationFilePath | Split-Path -Parent
            Result = $result
            ComparisonReportLink = $comparisonReportLink
        }
    }
}

# Generate the HTML report
$htmlReport = @"
<html>
<head>
    <title>Comparison Report</title>
    <style>
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
        .mismatch {
            background-color: #FF0000; /* red background for mismatching lines */
        }
    </style>
</head>
<body>
    <h1>Comparison Report</h1>
    <table>
        <tr>
            <th>FileName</th>
            <th>SourceFolder</th>
            <th>DestinationFolder</th>
            <th>Result</th>
            <th>Comparison Report</th>
        </tr>
"@ + ($results | ConvertTo-Html -Fragment) + @"
    </table>
    <script>
        function showDiffReport(element) {
            var diffReport = element.getAttribute('data-diff-report');
            var diffReportHtml = "<table border='1'>";
            diffReportHtml += "<tr><th>Line Number</th><th>Source Line</th><th>Destination Line</th></tr>";
            diffReport.split('<br>').forEach(function(line) {
                var mismatch = line.indexOf('<td>') > -1;
                diffReportHtml += "<tr" + (mismatch? " class='mismatch'" : "") + ">" + line + "</tr>";
            });
            diffReportHtml += "</table>";

            var diffReportDialog = document.createElement('div');
            diffReportDialog.innerHTML = diffReportHtml;
            diffReportDialog.style.position = 'absolute';
            diffReportDialog.style.top = '50%';
            diffReportDialog.style.left = '50%';
            diffReportDialog.style.transform = 'translate(-50%, -50%)';
            diffReportDialog.style.background = 'white';
            diffReportDialog.style.padding = '10px';
            diffReportDialog.style.border = '1px solid black';
            document.body.appendChild(diffReportDialog);
        }
    </script>
</body>
</html>
"@

# Output the HTML report
$htmlReport | Out-File $outputReportPath
Write-Output "Comparison report has been saved to: $outputReportPath"

new files version
# File paths for the two files to compare
$file1 = "C:\path\to\file1.txt"
$file2 = "C:\path\to\file2.txt"

# Output HTML report file path
$outputReport = "C:\path\to\ComparisonReport.html"

# Read the files into arrays
$content1 = Get-Content -Path $file1
$content2 = Get-Content -Path $file2

# Find the maximum number of lines in either file
$maxLines = [Math]::Max($content1.Length, $content2.Length)

# Initialize HTML content
$htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>File Comparison Report</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .mismatch { color: red; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid black; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>File Comparison Report</h1>
    <h2>File 1: $file1</h2>
    <h2>File 2: $file2</h2>
    <table>
        <tr>
            <th>Line Number</th>
            <th>File 1</th>
            <th>File 2</th>
        </tr>
"@

# Loop through each line up to the maximum number of lines
for ($i = 0; $i -lt $maxLines; $i++) {
    $lineNumber = $i + 1
    $line1 = if ($i -lt $content1.Length) { $content1[$i] } else { "" }
    $line2 = if ($i -lt $content2.Length) { $content2[$i] } else { "" }
    
    # Compare the lines
    if ($line1 -ne $line2) {
        # Append mismatching lines to the HTML content
        $htmlContent += @"
        <tr>
            <td>$lineNumber</td>
            <td class='mismatch'>$( [System.Web.HttpUtility]::HtmlEncode($line1) )</td>
            <td class='mismatch'>$( [System.Web.HttpUtility]::HtmlEncode($line2) )</td>
        </tr>
"@
    }
}

# Finalize HTML content
$htmlContent += @"
    </table>
    <footer>
        <p>Comparison complete.</p>
    </footer>
</body>
</html>
"@

# Save the HTML content to the output file
Set-Content -Path $outputReport -Value $htmlContent

Write-Host "HTML report generated at: $outputReport"

updated
# File paths for the two files to compare
$file1 = "C:\path\to\file1.txt"
$file2 = "C:\path\to\file2.txt"

# Output HTML report file path
$outputReport = "C:\path\to\ComparisonReport.html"

# Read the files into arrays
$content1 = Get-Content -Path $file1
$content2 = Get-Content -Path $file2

# Find the maximum number of lines in either file
$maxLines = [Math]::Max($content1.Length, $content2.Length)

# Initialize HTML content
$htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>File Comparison Report</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .mismatch { color: red; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid black; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>File Comparison Report</h1>
    <h2>File 1: $file1</h2>
    <h2>File 2: $file2</h2>
    <table>
        <tr>
            <th>Line Number</th>
            <th>File 1</th>
            <th>File 2</th>
        </tr>
"@

# Function to encode HTML content
function Encode-Html {
    param ([string]$input)
    $encoded = [System.Web.HttpUtility]::HtmlEncode($input)
    return $encoded -replace "`n", "<br>" -replace "`r", ""
}

# Loop through each line up to the maximum number of lines
for ($i = 0; $i -lt $maxLines; $i++) {
    $lineNumber = $i + 1
    $line1 = if ($i -lt $content1.Length) { $content1[$i] } else { "" }
    $line2 = if ($i -lt $content2.Length) { $content2[$i] } else { "" }
    
    # Compare the lines
    if ($line1 -ne $line2) {
        # Append mismatching lines to the HTML content
        $htmlContent += @"
        <tr>
            <td>$lineNumber</td>
            <td class='mismatch'>$(Encode-Html -input $line1)</td>
            <td class='mismatch'>$(Encode-Html -input $line2)</td>
        </tr>
"@
    }
}

# Finalize HTML content
$htmlContent += @"
    </table>
    <footer>
        <p>Comparison complete.</p>
    </footer>
</body>
</html>
"@

# Save the HTML content to the output file
Set-Content -Path $outputReport -Value $htmlContent -Encoding UTF8

Write-Host "HTML report generated at: $outputReport"
new

# File paths for the two XML files to compare
$file1 = "C:\path\to\file1.xml"
$file2 = "C:\path\to\file2.xml"

# Output HTML report file path
$outputReport = "C:\path\to\ComparisonReport.html"

# Load the XML files
[xml]$xml1 = Get-Content -Path $file1
[xml]$xml2 = Get-Content -Path $file2

# Function to compare XML nodes recursively
function Compare-Nodes {
    param (
        [xml]$node1,
        [xml]$node2,
        [string]$path = "/"
    )
    
    $mismatches = @()

    # Compare node names
    if ($node1.Name -ne $node2.Name) {
        $mismatches += "Node name mismatch at $path: '$($node1.Name)' vs '$($node2.Name)'"
    }

    # Compare attributes
    foreach ($attr in $node1.Attributes) {
        if ($node2.Attributes[$attr.Name].Value -ne $attr.Value) {
            $mismatches += "Attribute mismatch at $path/@$($attr.Name): '$($attr.Value)' vs '$($node2.Attributes[$attr.Name].Value)'"
        }
    }
    
    # Compare child nodes
    $childNodes1 = $node1.ChildNodes | Where-Object { $_.NodeType -eq "Element" }
    $childNodes2 = $node2.ChildNodes | Where-Object { $_.NodeType -eq "Element" }
    
    $maxCount = [Math]::Max($childNodes1.Count, $childNodes2.Count)
    for ($i = 0; $i -lt $maxCount; $i++) {
        if ($i -lt $childNodes1.Count -and $i -lt $childNodes2.Count) {
            $mismatches += Compare-Nodes -node1 $childNodes1[$i] -node2 $childNodes2[$i] -path "$path/$($childNodes1[$i].Name)"
        }
        elseif ($i -lt $childNodes1.Count) {
            $mismatches += "Extra node in File 1 at $path: '$($childNodes1[$i].OuterXml)'"
        }
        elseif ($i -lt $childNodes2.Count) {
            $mismatches += "Extra node in File 2 at $path: '$($childNodes2[$i].OuterXml)'"
        }
    }

    return $mismatches
}

# Start comparing the root nodes
$mismatches = Compare-Nodes -node1 $xml1.DocumentElement -node2 $xml2.DocumentElement

# Initialize HTML content
$htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>XML Comparison Report</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .mismatch { color: red; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid black; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>XML Comparison Report</h1>
    <h2>File 1: $file1</h2>
    <h2>File 2: $file2</h2>
    <table>
        <tr>
            <th>Mismatch</th>
        </tr>
"@

# Add mismatches to the HTML content
foreach ($mismatch in $mismatches) {
    $htmlContent += @"
        <tr>
            <td class='mismatch'>$mismatch</td>
        </tr>
"@
}

# Finalize HTML content
$htmlContent += @"
    </table>
    <footer>
        <p>Comparison complete.</p>
    </footer>
</body>
</html>
"@

# Save the HTML content to the output file
Set-Content -Path $outputReport -Value $htmlContent -Encoding UTF8

Write-Host "HTML report generated at: $outputReport"
